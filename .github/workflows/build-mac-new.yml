name: mac-electron-build

on:
  workflow_dispatch:
  push:
    branches: [ "gitac"]
  pull_request:
    paths:
      - "scripts/**"
      - "app/**"
      - "resources/**"
      - "main.js"
      - "package.json"   # lockfile-free

concurrency:
  group: mac-electron-build-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-mac:
    name: Build mac (${{ matrix.arch }})
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: macos-14   # Apple Silicon host ‚Üí arm64
            arch: arm64
          - runner: macos-13   # Intel host ‚Üí x64
            arch: x64
    runs-on: ${{ matrix.runner }}

    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Optional signing/notarization (unsigned by default)
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      CSC_LINK: ${{ secrets.MAC_CERT_P12_BASE64 }}
      CSC_KEY_PASSWORD: ${{ secrets.MAC_CERT_PASSWORD }}
      CSC_IDENTITY_AUTO_DISCOVERY: ${{ (secrets.APPLE_ID && secrets.MAC_CERT_P12_BASE64) && 'true' || 'false' }}

      DEBUG: electron-builder
      HOMEBREW_NO_AUTO_UPDATE: 1
      HOMEBREW_NO_INSTALL_CLEANUP: 1

      ELECTRON_CACHE: $HOME/.cache/electron
      ELECTRON_BUILDER_CACHE: $HOME/.cache/electron-builder

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show workspace layout (debug)
        run: |
          echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE"
          find . -maxdepth 2 -type f -name package.json -print

      - name: Detect project directory (folder with package.json)
        id: detect
        shell: bash
        run: |
          set -euo pipefail
          candidates=( "." "idep-golem-package" "electron" "app" )
          proj=""
          for d in "${candidates[@]}"; do
            if [ -f "$d/package.json" ]; then proj="$d"; break; fi
          done
          if [ -z "$proj" ]; then
            # Fall back to first package.json found outside node_modules
            proj="$(git ls-files | grep -E '/?package\.json$' | grep -v node_modules | head -n1 | xargs -I{} dirname {} || true)"
          fi
          if [ -z "$proj" ] || [ ! -f "$proj/package.json" ]; then
            echo "‚ùå No package.json found. Ensure your Electron project is committed."
            exit 1
          fi
          echo "PROJECT_DIR=$proj" >> "$GITHUB_ENV"
          echo "Detected project dir: $proj"

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      # Lockfile-free caches
      - name: Cache npm (no lockfile)
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: npm-${{ runner.os }}-${{ hashFiles('**/package.json') }}

      - name: Cache Electron caches (optional)
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.ELECTRON_CACHE }}
            ${{ env.ELECTRON_BUILDER_CACHE }}
          key: electron-${{ runner.os }}-${{ hashFiles('**/package.json') }}

      - name: Show signing mode
        run: |
          if [[ "${CSC_IDENTITY_AUTO_DISCOVERY}" == "true" ]]; then
            echo "üîê Code signing & notarization ENABLED (secrets detected)."
          else
            echo "‚ö†Ô∏è  Building UNSIGNED dev artifacts (no Apple secrets)."
          fi

      - name: Verify afterPack hook path
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          if grep -q '"afterPack"' package.json; then
            if [ -f "scripts/afterPack-prune-lproj.js" ]; then
              echo "‚úÖ Found scripts/afterPack-prune-lproj.js"
            else
              echo "‚ùó afterPack file missing: scripts/afterPack-prune-lproj.js"
              echo "   Your package.json references it; add the file or update the path."
            fi
          else
            echo "‚ÑπÔ∏è No afterPack entry in package.json"
          fi

      - name: Install dependencies (no lockfile)
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          npm config set fund false
          npm install --no-audit --no-fund

      - name: Prepare R.framework (prepack & fix)
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          set -euo pipefail
          npm run fix-rframework
          npm run prepack
          if [ -d "resources/R.framework" ]; then
            cd resources/R.framework
            CURR=$(readlink Versions/Current || ls Versions | sort -V | tail -n 1)
            mkdir -p "Versions/${CURR}/Libraries"
            echo "Ensured Libraries at Versions/${CURR}/Libraries"
          fi

      - name: Build (Electron / macOS ${{ matrix.arch }})
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          set -euo pipefail
          echo "Electron $(npx --yes electron --version || true)"
          echo "electron-builder $(npx --yes electron-builder --version || true)"
          if npm run -s dist:mac --if-present; then
            echo "‚úÖ Ran npm run dist:mac"
          elif npm run -s dist:mac-build --if-present; then
            echo "‚úÖ Ran npm run dist:mac-build"
          else
            echo "No dist:mac* scripts found; calling electron-builder directly."
            npx electron-builder --mac
          fi

      - name: Post-build check
        if: always()
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          npm run -s post-build-check --if-present || true

      - name: List dist/
        if: always()
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          echo "=== dist contents ==="
          ls -R1 dist || true

      - name: Upload artifacts (DMG/ZIP/.app)
        uses: actions/upload-artifact@v4
        with:
          name: mac-${{ matrix.arch }}-dist
          path: |
            ${{ env.PROJECT_DIR }}/dist/**/*.dmg
            ${{ env.PROJECT_DIR }}/dist/**/*.zip
            ${{ env.PROJECT_DIR }}/dist/**/*.app
            ${{ env.PROJECT_DIR }}/dist/*.yml
            ${{ env.PROJECT_DIR }}/dist/*.blockmap
          if-no-files-found: warn

      - name: Upload electron-builder logs (if any)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mac-${{ matrix.arch }}-logs
          path: |
            ${{ env.PROJECT_DIR }}/*.log
            ${{ env.PROJECT_DIR }}/dist/*.log
          if-no-files-found: ignore
