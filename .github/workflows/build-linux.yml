# name: Build Linux (Electron)

# on:
#   push:
#     branches: [ master ]                 # change if your default branch differs
#     paths:
#       - 'electron/**'
#       - '.github/workflows/build-linux.yml'
#   workflow_dispatch:

# jobs:
#   build-linux:
#     runs-on: ubuntu-latest
#     defaults:
#       run:
#         working-directory: electron      # your electron/ subfolder

#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4

#       - name: Setup Node
#         uses: actions/setup-node@v4
#         with:
#           node-version: 20
#           # Re-enable cache after you commit electron/package-lock.json:
#           # cache: npm
#           # cache-dependency-path: electron/package-lock.json

#       # Install R and stage a portable runtime under electron/resources/R.linux
#       - name: Install R (Ubuntu)
#         run: |
#           set -euo pipefail
#           sudo apt-get update
#           sudo apt-get install -y r-base

#       - name: Stage R.linux runtime for packaging
#         run: |
#           set -euo pipefail
#           RHOME=$(R RHOME)
#           echo "RHOME=$RHOME"
#           mkdir -p resources/R.linux
#           # copy the whole R tree (bin, lib, etc.)
#           cp -a "$RHOME/." resources/R.linux/
#           # sanity checks
#           test -x resources/R.linux/bin/Rscript
#           ls -al resources/R.linux/bin || true

#       # (Optional) Verify afterPack hook presence/value to avoid path typos
#       - name: Verify afterPack hook (optional)
#         run: |
#           node -e "const p=require('./package.json'); console.log('afterPack=', p.build && p.build.afterPack)"
#           test -f scripts/afterPack-prune-lproj.js && echo "afterPack script exists" || echo "no afterPack script (ok)"

#       - name: Install Node dependencies
#         run: |
#           if [ -f package-lock.json ]; then
#             npm ci
#           else
#             echo "No package-lock.json found; using npm install"
#             npm install
#           fi

#       - name: Build (electron-builder --linux)
#         env:
#           CSC_IDENTITY_AUTO_DISCOVERY: "false"   # no codesign on Linux
#         run: npx electron-builder --linux

#       - name: Upload dist artifacts
#         uses: actions/upload-artifact@v4
#         with:
#           name: linux-dist
#           path: electron/dist/**
