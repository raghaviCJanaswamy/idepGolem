name: build-mac

on:
  workflow_dispatch:
  push:
    tags: ["v*"]
  pull_request:
    paths:
      - "**/scripts/**"
      - "**/app/**"
      - "**/resources/**"
      - "**/main.js"
      - "**/package.json"

concurrency:
  group: build-mac-${{ github.ref }}
  cancel-in-progress: true

jobs:
  mac:
    name: mac (${{ matrix.arch }})
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: macos-14   # Apple Silicon
            arch: arm64
          - runner: macos-13   # Intel
            arch: x64
    runs-on: ${{ matrix.runner }}

    env:
      PROJECT_DIR: .          # set to your subfolder if not repo root (e.g., idep-golem-package)
      R_VERSION: "4.4.1"
      EMBED_R: "true"         # set to "false" to skip embedding R.framework (dev-only)
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Optional signing (leave secrets empty for unsigned dev builds)
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      CSC_LINK: ${{ secrets.MAC_CERT_P12_BASE64 }}
      CSC_KEY_PASSWORD: ${{ secrets.MAC_CERT_PASSWORD }}
      CSC_IDENTITY_AUTO_DISCOVERY: ${{ (secrets.APPLE_ID && secrets.MAC_CERT_P12_BASE64) && 'true' || 'false' }}

    steps:
      - uses: actions/checkout@v4

      # Auto-detect project dir if needed
      - name: Detect project directory
        if: env.PROJECT_DIR == '.'
        shell: bash
        run: |
          set -euo pipefail
          for d in "." "idep-golem-package" "electron" "app"; do
            if [ -f "$d/package.json" ]; then echo "PROJECT_DIR=$d" >> "$GITHUB_ENV"; exit 0; fi
          done
          found="$(git ls-files | grep -E '/?package\.json$' | grep -v node_modules | head -n1 || true)"
          [ -n "$found" ] && echo "PROJECT_DIR=$(dirname "$found")" >> "$GITHUB_ENV" || (echo "No package.json found" && exit 1)

      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      # Install R so /Library/Frameworks/R.framework exists on the runner
      - name: Setup R ${{ env.R_VERSION }}
        if: env.EMBED_R == 'true'
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ env.R_VERSION }}

      - name: Install deps (no lockfile)
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          npm config set fund false
          npm install --no-audit --no-fund

      # ----- R.framework prep & verify -----

      # Try your repo script first, otherwise do an inline copy
      - name: Prepare embedded R.framework
        if: env.EMBED_R == 'true'
        working-directory: ${{ env.PROJECT_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          if [ -f scripts/prepare_r_framework.sh ]; then
            echo "Using repo script: scripts/pre_build_fix_rframework.sh"
            bash scripts/pre_build_fix_rframework.sh
          else
            echo "Repo script not found; running inline fallback…"
            SRC="/Library/Frameworks/R.framework"
            DEST="resources/R.framework"
            if [ ! -d "$SRC" ]; then
              echo "❌ $SRC not found. Did setup-r run?"
              exit 1
            fi
            rm -rf "$DEST"
            mkdir -p resources
            # Preserve symlinks/attrs
            rsync -a "$SRC/" "$DEST/"

            # Ensure Libraries dir & top-level symlinks exist
            pushd "$DEST" >/dev/null
            CURR=$(readlink Versions/Current || ls Versions | sort -V | tail -n 1)
            mkdir -p "Versions/$CURR/Libraries"
            for ITEM in Headers Resources PrivateHeaders Libraries; do
              [ -e "$ITEM" ] || ln -s "Versions/$CURR/$ITEM" "$ITEM" || true
            done
            popd >/dev/null
          fi

      - name: Verify R.framework
        if: env.EMBED_R == 'true'
        working-directory: ${{ env.PROJECT_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          if [ -f scripts/verify_sources.sh ]; then
            bash scripts/verify_sources.sh
          else
            # inline verify
            RFW="resources/R.framework"
            [ -d "$RFW" ] || (echo "❌ R.framework missing" && exit 1)
            CURR=$(cd "$RFW" && (readlink Versions/Current || ls Versions | sort -V | tail -n 1))
            test -x "$RFW/Resources/bin/Rscript"
            test -d "$RFW/Versions/$CURR/Libraries"
            echo "✅ R.framework OK (version $CURR)"
          fi

      # ----- Build -----

      - name: Warn if afterPack script path missing
        working-directory: ${{ env.PROJECT_DIR }}
        shell: bash
        run: |
          if grep -q '"afterPack"' package.json; then
            test -f scripts/afterPack-prune-lproj.js || echo "⚠️ afterPack script not found at scripts/afterPack-prune-lproj.js"
          fi

      - name: Build (macOS ${{ matrix.arch }})
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          set -euo pipefail
          if npm run -s dist:mac --if-present; then
            echo "Ran npm run dist:mac"
          elif npm run -s dist:mac-build --if-present; then
            echo "Ran npm run dist:mac-build"
          else
            npx electron-builder --mac --${{ matrix.arch }}
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mac-${{ matrix.arch }}-dist
          path: |
            ${{ env.PROJECT_DIR }}/dist/**/*.dmg
            ${{ env.PROJECT_DIR }}/dist/**/*.zip
            ${{ env.PROJECT_DIR }}/dist/**/*.app
            ${{ env.PROJECT_DIR }}/dist/*.yml
            ${{ env.PROJECT_DIR }}/dist/*.blockmap
          if-no-files-found: warn
