name: build-mac
on:
  workflow_dispatch:
  push:
    branches: [" gitac "]            # change if your default branch differs
  pull_request:
    paths: ["electron/**", ".github/workflows/build-mac.yml"]

concurrency:
  group: build-mac-${{ github.ref }}
  cancel-in-progress: true

jobs:
  mac:
    name: mac (${{ matrix.arch }})
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: macos-14
            arch: arm64
          - runner: macos-13
            arch: x64
    runs-on: ${{ matrix.runner }}

    env:
      PROJECT_DIR: electron
      R_VERSION: "4.4.1"
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Signing OFF by default; guard step may enable if secrets are good
      CSC_IDENTITY_AUTO_DISCOVERY: "false"
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      CSC_LINK: ${{ secrets.MAC_CERT_P12_BASE64 }}        # base64 or path; guard handles it
      CSC_KEY_PASSWORD: ${{ secrets.MAC_CERT_PASSWORD }}

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: actions/setup-node@v4
        with: { node-version: "20" }

      # Ensure R exists (Framework preferred; brew formula fallback)
      - name: Install/verify R
        shell: bash
        run: |
          set -euo pipefail
          have_r(){ command -v R >/dev/null 2>&1; }
          if ! have_r; then brew update || true; brew install --cask r || true; fi
          if ! have_r; then brew install r || true; fi
          have_r || (echo "R not available"; exit 1)
          echo "R version:"; R --version || true
          echo "RHOME:"; R RHOME || true
          echo "/Library/Frameworks:"; ls -la /Library/Frameworks || true

      - name: Install deps (no lockfile)
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          npm config set fund false
          npm install --no-audit --no-fund

      # Make electron/ a tiny git repo so electron-builder sees .git/config
      - name: Ensure git metadata for electron-builder
        working-directory: ${{ env.PROJECT_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -d ".git" ]; then
            git init
            git remote add origin "https://github.com/${{ github.repository }}.git"
            git config user.email "actions@users.noreply.github.com"
            git config user.name  "github-actions[bot]"
          fi
          git config --get remote.origin.url || true

      # Prepare embedded R runtime (handles Framework or brew lib/R)
      - name: Prepare embedded R.framework
        working-directory: ${{ env.PROJECT_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          chmod +x scripts/pre_build_fix_rframework.sh || true
          bash scripts/pre_build_fix_rframework.sh

      - name: Verify R runtime
        working-directory: ${{ env.PROJECT_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          bash scripts/verify_r_runtime.sh

      # Validate afterPack & entitlements paths
      - name: Verify package paths
        working-directory: ${{ env.PROJECT_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          test -f scripts/afterPack-prune-lproj.js || echo "⚠️ afterPack missing"
          test -f entitlements.mac.plist || { echo "❌ entitlements.mac.plist missing"; exit 1; }

      # Enable signing if cert secret is valid base64 or a real path
      - name: Prepare signing (guard)
        working-directory: ${{ env.PROJECT_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          if [ -n "${CSC_LINK:-}" ] && [ -e "${CSC_LINK}" ]; then
            echo "CSC_LINK is a path; enabling signing"
            echo "CSC_IDENTITY_AUTO_DISCOVERY=true" >> $GITHUB_ENV
            exit 0
          fi
          if [ -n "${CSC_LINK:-}" ]; then
            node -e "require('fs').writeFileSync('/tmp/cert.p12', Buffer.from(process.env.CSC_LINK,'base64'))"
            if [ -s /tmp/cert.p12 ]; then
              echo "CSC_LINK=file:///tmp/cert.p12" >> $GITHUB_ENV
              echo "CSC_IDENTITY_AUTO_DISCOVERY=true" >> $GITHUB_ENV
            else
              echo "Bad CSC_LINK base64; leaving signing disabled"
              echo "CSC_LINK=" >> $GITHUB_ENV
              echo "CSC_IDENTITY_AUTO_DISCOVERY=false" >> $GITHUB_ENV
            fi
          fi

      - name: Build (macOS ${{ matrix.arch }})
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          set -euo pipefail
          if npm run -s dist:mac --if-present; then
            echo "Ran npm run dist:mac"
          elif npm run -s dist:mac-build --if-present; then
            echo "Ran npm run dist:mac-build"
          else
            npx electron-builder --mac --${{ matrix.arch }} --publish=never
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mac-${{ matrix.arch }}-dist
          path: |
            ${{ env.PROJECT_DIR }}/dist/**/*.dmg
            ${{ env.PROJECT_DIR }}/dist/**/*.zip
            ${{ env.PROJECT_DIR }}/dist/**/*.app
            ${{ env.PROJECT_DIR }}/dist/*.yml
            ${{ env.PROJECT_DIR }}/dist/*.blockmap
          if-no-files-found: warn
