name: build-mac

on:
  workflow_dispatch:
  push:
    branches: ["gitac"]
  pull_request:
    paths:
      - "electron/**"
      - ".github/workflows/build-mac.yml"

concurrency:
  group: build-mac-${{ github.ref }}
  cancel-in-progress: true

jobs:
  mac:
    name: mac (${{ matrix.arch }})
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: macos-14   # Apple Silicon
            arch: arm64
          - runner: macos-13   # Intel
            arch: x64
    runs-on: ${{ matrix.runner }}

    env:
      PROJECT_DIR: electron
      R_VERSION: "4.4.1"
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      CSC_IDENTITY_AUTO_DISCOVERY: "false"
      CSC_LINK: ""
      CSC_KEY_PASSWORD: ""
      APPLE_ID: ""
      APPLE_APP_SPECIFIC_PASSWORD: ""
      APPLE_TEAM_ID: ""
      # (Optional) signing; leave empty for unsigned dev builds
      # APPLE_ID: ${{ secrets.APPLE_ID }}
      # APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
      # APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      # CSC_LINK: ${{ secrets.MAC_CERT_P12_BASE64 }}
      # CSC_KEY_PASSWORD: ${{ secrets.MAC_CERT_PASSWORD }}
      # CSC_IDENTITY_AUTO_DISCOVERY: ${{ (secrets.APPLE_ID && secrets.MAC_CERT_P12_BASE64) && 'true' || 'false' }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0     # good hygiene for git metadata

      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      # Install R so /Library/Frameworks/R.framework exists
      - name: Setup R ${{ env.R_VERSION }}
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ env.R_VERSION }}

      - name: Install deps (no lockfile)
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          npm config set fund false
          npm install --no-audit --no-fund

      # >>> Option C: ensure a lightweight git repo inside electron/ so electron-builder sees .git/config
      - name: Ensure git repo metadata for electron-builder
        working-directory: ${{ env.PROJECT_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -d ".git" ]; then
            git init
            git remote add origin "https://github.com/${{ github.repository }}.git"
            git config user.email "actions@users.noreply.github.com"
            git config user.name  "github-actions[bot]"
          fi
          echo "origin => $(git config --get remote.origin.url || echo '(none)')"

      # Prepare embedded R.framework using your script in electron/scripts/
      - name: Prepare embedded R.framework (flatten)
        working-directory: ${{ env.PROJECT_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          chmod +x scripts/pre_build_fix_rframework.sh || true
          bash scripts/pre_build_fix_rframework.sh

      - name: Verify flattened R.framework
        working-directory: ${{ env.PROJECT_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          RFW="resources/R.framework"
          [ -d "$RFW/Resources" ]
          if [ -x "$RFW/Resources/bin/Rscript" ] || [ -x "$RFW/Resources/Rscript" ]; then
            echo "✅ Rscript exists in flattened framework"
          else
            echo "❌ Rscript missing in $RFW/Resources"; ls -la "$RFW/Resources" || true; exit 1
          fi

      - name: Build (macOS ${{ matrix.arch }})
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          set -euo pipefail
          if npm run -s dist:mac --if-present; then
            echo "Ran npm run dist:mac"
          elif npm run -s dist:mac-build --if-present; then
            echo "Ran npm run dist:mac-build"
          else
            npx electron-builder --mac --${{ matrix.arch }} --publish=never
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mac-${{ matrix.arch }}-dist
          path: |
            ${{ env.PROJECT_DIR }}/dist/**/*.dmg
            ${{ env.PROJECT_DIR }}/dist/**/*.zip
            ${{ env.PROJECT_DIR }}/dist/**/*.app
            ${{ env.PROJECT_DIR }}/dist/*.yml
            ${{ env.PROJECT_DIR }}/dist/*.blockmap
          if-no-files-found: warn
