# name: Build macOS (Electron)

# on:
#   push:
#     branches: [ master ]
#     paths:
#       - 'electron/**'
#       - '.github/workflows/build-mac.yml'
#   workflow_dispatch:

# jobs:
#   build-mac:
#     runs-on: macos-latest
#     defaults:
#       run:
#         working-directory: electron

#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4

#       - name: Setup Node
#         uses: actions/setup-node@v4
#         with:
#           node-version: 20
#           # Uncomment after committing electron/package-lock.json:
#           # cache: npm
#           # cache-dependency-path: electron/package-lock.json

#       # Install R on macOS (provides /Library/Frameworks/R.framework)
#       - name: Setup R
#         uses: r-lib/actions/setup-r@v2
#         with:
#           r-version: 'release'

#       # Copy /Library/Frameworks/R.framework into electron/resources
#       - name: Stage R.framework into resources
#         run: |
#           set -euo pipefail
#           if [ ! -d "/Library/Frameworks/R.framework" ]; then
#             echo "R.framework missing at /Library/Frameworks"; exit 1
#           fi
#           mkdir -p resources
#           rsync -a "/Library/Frameworks/R.framework" "resources/"
#           # If you have a flattener, run it (optional)
#           if npm run | grep -q 'fix-rframework'; then
#             npm run fix-rframework
#           fi
#           # Sanity: Rscript present
#           test -x resources/R.framework/Resources/bin/Rscript || \
#             test -x resources/R.framework/Resources/Rscript

#       # Optional: ensure afterPack hook path wonâ€™t break the build
#       - name: Verify afterPack hook (optional)
#         run: |
#           node -e "const p=require('./package.json'); console.log('afterPack=', p.build && p.build.afterPack)"
#           test -f scripts/afterPack-prune-lproj.js && echo "afterPack script exists" || echo "no afterPack script (ok)"

#       - name: Install Node dependencies
#         run: |
#           if [ -f package-lock.json ]; then
#             npm ci
#           else
#             echo "No package-lock.json found; using npm install"
#             npm install
#           fi

#       # Use your script exactly: "dist:mac-build": "npm run build --mac"
#       - name: Build (npm run dist:mac-build)
#         env:
#           # Avoid accidental signing prompts/timeouts in CI
#           CSC_IDENTITY_AUTO_DISCOVERY: "false"
#         run: npm run dist:mac-build

#       - name: Upload dist artifacts
#         uses: actions/upload-artifact@v4
#         with:
#           name: mac-dist
#           path: electron/dist/**
